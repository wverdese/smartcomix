apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23

        applicationId "com.shockdom.smartcomix"
        versionCode 7
        versionName '1.0.1'
    }
    signingConfigs {
        config getReleaseSigningConfig("signing.properties")
    }
    buildTypes {
        all { variant ->
            generateBuildConfigFieldsFromServerProperties(variant, "server.properties")
        }
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.config
        }
    }
}

def getReleaseSigningConfig(configFilename)
{
    def Properties props = new Properties()
    def propFile = file(new File(configFilename))
    if (propFile.canRead())
    {
        props.load(new FileInputStream(propFile))
        if (props != null &&
                props.containsKey("STORE_FILE") &&
                props.containsKey("STORE_PASSWORD") &&
                props.containsKey("KEY_ALIAS") &&
                props.containsKey("KEY_PASSWORD"))
        {
            return {
                storeFile = file(props["STORE_FILE"])
                storePassword = props["STORE_PASSWORD"]
                keyAlias = props["KEY_ALIAS"]
                keyPassword = props["KEY_PASSWORD"]
            }
        }
        else
        {
            println configFilename + " found but some entries are missing"
            return null
        }
    }
    else
    {
        println configFilename + " not found"
        return null
    }
}

def generateBuildConfigFieldsFromServerProperties(variant, configFilename)
{
    def Properties props = new Properties()
    def propFile = file(new File(configFilename))
    if (propFile.canRead())
    {
        props.load(new FileInputStream(propFile))
        if (props != null)
        {
            props.load(new FileInputStream(propFile))
            if (props != null) {
                if (props.containsKey("SERVER_HOST")) {
                    variant.buildConfigField "String", "SERVER_HOST", "\"${props["SERVER_HOST"]}\""
                } else {
                    println configFilename + " found but server host is missing"
                }

                if (variant.name == "debug" &&
                        props.containsKey("SERVER_ADMIN_USER") &&
                        props.containsKey("SERVER_ADMIN_PASSWORD")) {
                    variant.buildConfigField "String", "SERVER_ADMIN_USER", "\"${props["SERVER_ADMIN_USER"]}\""
                    variant.buildConfigField "String", "SERVER_ADMIN_PASSWORD", "\"${props["SERVER_ADMIN_PASSWORD"]}\""
                } else {
                    println configFilename + " found but admin credentials are missing"
                }
            } else {
                println configFilename + " found but is empty"
            }
        }
    }
    else
    {
        println configFilename + " not found"
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:design:23.0.1'
    compile 'com.facebook.fresco:fresco:0.7.0'
    compile 'com.facebook.fresco:imagepipeline-okhttp:0.7.0'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.anjlab.android.iab.v3:library:1.0.24'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile 'com.android.support:recyclerview-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'com.github.ksoichiro:android-observablescrollview:1.5.1'
    compile 'com.readystatesoftware.systembartint:systembartint:1.0.4'
    compile 'org.jetbrains:annotations:13.0'
}
